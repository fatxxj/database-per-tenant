openapi: 3.0.3
info:
  title: TenantDbService API
  description: A multi-tenant database service supporting SQL Server and MongoDB per tenant
  version: 1.0.0
  contact:
    name: API Support
    email: support@tenantdbservice.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /health/live:
    get:
      summary: Health check - liveness
      description: Returns 200 if the service is alive
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

  /health/ready:
    get:
      summary: Health check - readiness
      description: Returns 200 if the service is ready to handle requests
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "not ready"
                  error:
                    type: string

  /auth/dev-token:
    post:
      summary: Generate development JWT token
      description: Generates a JWT token for development/testing purposes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tenantId
              properties:
                tenantId:
                  type: string
                  description: The tenant ID to include in the token
                  example: "demo-tenant"
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /tenants:
    get:
      summary: List all tenants
      description: Returns a list of all active tenants
      responses:
        '200':
          description: List of tenants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantInfo'
    post:
      summary: Create a new tenant
      description: Creates a new tenant with separate SQL Server and MongoDB databases
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the tenant
                  example: "Acme Corporation"
      responses:
        '200':
          description: Tenant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenantId:
                    type: string
                    description: The generated tenant ID
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/orders:
    get:
      summary: Get orders
      description: Returns the latest 50 orders for the current tenant
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '400':
          description: Missing tenant context
    post:
      summary: Create a new order
      description: Creates a new order for the current tenant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - amount
              properties:
                code:
                  type: string
                  description: Order code
                  example: "ORD-001"
                amount:
                  type: number
                  format: decimal
                  description: Order amount
                  example: 99.99
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

  /api/orders/{id}:
    get:
      summary: Get order by ID
      description: Returns a specific order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '401':
          description: Unauthorized

  /api/events:
    get:
      summary: Get events
      description: Returns the latest 50 events for the current tenant
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
          description: Filter events by type
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
    post:
      summary: Create a new event
      description: Creates a new event for the current tenant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - payload
              properties:
                type:
                  type: string
                  description: Event type
                  example: "user.login"
                payload:
                  type: object
                  description: Event payload
                  example:
                    userId: "123"
                    timestamp: "2024-01-01T00:00:00Z"
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    TenantInfo:
      type: object
      properties:
        id:
          type: string
          description: Tenant ID
        name:
          type: string
          description: Tenant name
        status:
          type: string
          description: Tenant status
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    Order:
      type: object
      properties:
        id:
          type: string
          description: Order ID
        code:
          type: string
          description: Order code
        amount:
          type: number
          format: decimal
          description: Order amount
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    Event:
      type: object
      properties:
        id:
          type: string
          description: Event ID (MongoDB ObjectId)
        type:
          type: string
          description: Event type
        payload:
          type: object
          description: Event payload
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
